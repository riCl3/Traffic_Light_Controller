`timescale 1ns / 1ps

`define TRUE 	1'b1
`define FALSE	1'b0

module sig_control(
  output reg [1:0] hwy,
  output reg [1:0] cntry,
  input x,
  input clock,
  input clear
);

  // Internal State Variables
  reg[2:0] state;
  reg[2:0] next_state;
  
  // Parameters Define
  localparam RED		= 2'd0,
             YELLOW	= 2'd1,
             GREEN 	= 2'd2;

  // State Definition According to FSM
                          // Highway    // CountryRoad
  localparam S0 = 3'd0,   // GREEN      RED
             S1 = 3'd1,   // YELLOW     RED
             S2 = 3'd2,   // RED        RED
             S3 = 3'd3,   // RED        GREEN
             S4 = 3'd4;   // RED        YELLOW

  // Delays
  localparam Y2RDelay = 3,
             R2GDelay = 2;

  // Signal Controller Starts in S0 State
  initial begin
    state = S0;
    next_state = S0;
    hwy = GREEN;
    cntry = RED;
  end
  
  // State Will Change Only at the Positive Edge of the Clock
  always @(posedge clock) begin
    state <= next_state;
  end
  
  // Defining Each of The States'
  always @(state) begin
    case (state)
      S0: begin
        hwy = GREEN;
        cntry = RED;
      end
      
      S1: begin
        hwy = YELLOW;
        cntry = RED;
      end
      
      S2: begin
        hwy = RED;
        cntry = RED;
      end
      
      S3: begin
        hwy = RED;
        cntry = GREEN;
      end
      
      S4: begin
        hwy = RED;
        cntry = YELLOW;
      end
    endcase
  end
  
  // State Machine Using Case Statements
  always @(state or clear or x) begin
    if (clear)
      next_state = S0;
    else begin
      case (state)
        S0: if (x)
              next_state = S1;
            else 
              next_state = S0;
        
        S1: begin
          repeat(Y2RDelay) next_state = S1;
          next_state = S2;
        end
        
        S2: begin
          repeat(R2GDelay) next_state = S2;
          next_state = S3;
        end
        
        S3: if (x)
              next_state = S3;
            else
              next_state = S4;
        
        S4: begin
          repeat(Y2RDelay) next_state = S4;
          next_state = S0;
        end
        
        default: next_state = S0;
      endcase
    end
  end 

endmodule
